# This workflows will upload a Python Package using Twine when a release is created

name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [3.6, 3.7, 3.8]
        exclude:
          - os: macos-latest
            python-version: 3.8

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Format python version
      run: echo Building wheels for cp${py_vs}-cp${py_vs}m
      env:
        py_vs: echo ${{ matrix.python-version }} | sed 's/\.//g'
        manylinux_version: "cp${py_vs}-cp${py_vs}m"
    - name: State Python version
      run: echo Manylinux wheels built for $manylinux_version
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine
        python -m pip install -U cibuildwheel
    - name: Build manylinux Python wheels
      env:
        PY_VERSION: $( echo ${{ matrix.python-version }} | sed 's/\.//g')
      if: ${{ matrix.os != 'macos-latest' }}
      uses: RalfG/python-wheels-manylinux-build@v0.3.3
      with:
        python-versions: "cp${PY_VERSION}-cp${PY_VERSION}m"
        build-requirements: 'cython numpy'
    - name: Build Python wheels
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
         python setup.py bdist_wheel
    - name: Build source tarball and publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -f dist/*linux_x86_64.whl ]; then rm dist/*linux_x86_64.whl; fi
        python setup.py sdist
        python -m twine upload --skip-existing dist/*.whl dist/*tar.gz;
